'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="School")>  _
Partial Public Class SchoolDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCourse(instance As Course)
    End Sub
  Partial Private Sub UpdateCourse(instance As Course)
    End Sub
  Partial Private Sub DeleteCourse(instance As Course)
    End Sub
  Partial Private Sub InsertPerson(instance As Person)
    End Sub
  Partial Private Sub UpdatePerson(instance As Person)
    End Sub
  Partial Private Sub DeletePerson(instance As Person)
    End Sub
  Partial Private Sub InsertCourseGrade(instance As CourseGrade)
    End Sub
  Partial Private Sub UpdateCourseGrade(instance As CourseGrade)
    End Sub
  Partial Private Sub DeleteCourseGrade(instance As CourseGrade)
    End Sub
  Partial Private Sub InsertCourseInstructor(instance As CourseInstructor)
    End Sub
  Partial Private Sub UpdateCourseInstructor(instance As CourseInstructor)
    End Sub
  Partial Private Sub DeleteCourseInstructor(instance As CourseInstructor)
    End Sub
  Partial Private Sub InsertDepartment(instance As Department)
    End Sub
  Partial Private Sub UpdateDepartment(instance As Department)
    End Sub
  Partial Private Sub DeleteDepartment(instance As Department)
    End Sub
  Partial Private Sub InsertOfficeAssignment(instance As OfficeAssignment)
    End Sub
  Partial Private Sub UpdateOfficeAssignment(instance As OfficeAssignment)
    End Sub
  Partial Private Sub DeleteOfficeAssignment(instance As OfficeAssignment)
    End Sub
  Partial Private Sub InsertOnlineCourse(instance As OnlineCourse)
    End Sub
  Partial Private Sub UpdateOnlineCourse(instance As OnlineCourse)
    End Sub
  Partial Private Sub DeleteOnlineCourse(instance As OnlineCourse)
    End Sub
  Partial Private Sub InsertOnsiteCourse(instance As OnsiteCourse)
    End Sub
  Partial Private Sub UpdateOnsiteCourse(instance As OnsiteCourse)
    End Sub
  Partial Private Sub DeleteOnsiteCourse(instance As OnsiteCourse)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SchoolConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Courses() As System.Data.Linq.Table(Of Course)
		Get
			Return Me.GetTable(Of Course)
		End Get
	End Property
	
    Public ReadOnly Property People() As System.Data.Linq.Table(Of Person)
        Get
            Return Me.GetTable(Of Person)()
        End Get
    End Property
	
	Public ReadOnly Property CourseGrades() As System.Data.Linq.Table(Of CourseGrade)
		Get
			Return Me.GetTable(Of CourseGrade)
		End Get
	End Property
	
	Public ReadOnly Property CourseInstructors() As System.Data.Linq.Table(Of CourseInstructor)
		Get
			Return Me.GetTable(Of CourseInstructor)
		End Get
	End Property
	
	Public ReadOnly Property Departments() As System.Data.Linq.Table(Of Department)
		Get
			Return Me.GetTable(Of Department)
		End Get
	End Property
	
	Public ReadOnly Property OfficeAssignments() As System.Data.Linq.Table(Of OfficeAssignment)
		Get
			Return Me.GetTable(Of OfficeAssignment)
		End Get
	End Property
	
	Public ReadOnly Property OnlineCourses() As System.Data.Linq.Table(Of OnlineCourse)
		Get
			Return Me.GetTable(Of OnlineCourse)
		End Get
	End Property
	
	Public ReadOnly Property OnsiteCourses() As System.Data.Linq.Table(Of OnsiteCourse)
		Get
			Return Me.GetTable(Of OnsiteCourse)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Course")>  _
Partial Public Class Course
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseID As Integer
	
	Private _Title As String
	
	Private _Credits As Integer
	
	Private _DepartmentID As Integer
	
	Private _CourseGrades As EntitySet(Of CourseGrade)
	
	Private _CourseInstructors As EntitySet(Of CourseInstructor)
	
	Private _OnlineCourse As EntityRef(Of OnlineCourse)
	
	Private _OnsiteCourse As EntityRef(Of OnsiteCourse)
	
	Private _Department As EntityRef(Of Department)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCreditsChanging(value As Integer)
    End Sub
    Partial Private Sub OnCreditsChanged()
    End Sub
    Partial Private Sub OnDepartmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDepartmentIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseGrades = New EntitySet(Of CourseGrade)(AddressOf Me.attach_CourseGrades, AddressOf Me.detach_CourseGrades)
		Me._CourseInstructors = New EntitySet(Of CourseInstructor)(AddressOf Me.attach_CourseInstructors, AddressOf Me.detach_CourseInstructors)
		Me._OnlineCourse = CType(Nothing, EntityRef(Of OnlineCourse))
		Me._OnsiteCourse = CType(Nothing, EntityRef(Of OnsiteCourse))
		Me._Department = CType(Nothing, EntityRef(Of Department))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credits", DbType:="Int NOT NULL")>  _
	Public Property Credits() As Integer
		Get
			Return Me._Credits
		End Get
		Set
			If ((Me._Credits = value)  _
						= false) Then
				Me.OnCreditsChanging(value)
				Me.SendPropertyChanging
				Me._Credits = value
				Me.SendPropertyChanged("Credits")
				Me.OnCreditsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentID", DbType:="Int NOT NULL")>  _
	Public Property DepartmentID() As Integer
		Get
			Return Me._DepartmentID
		End Get
		Set
			If ((Me._DepartmentID = value)  _
						= false) Then
				If Me._Department.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepartmentIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentID = value
				Me.SendPropertyChanged("DepartmentID")
				Me.OnDepartmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_CourseGrade", Storage:="_CourseGrades", ThisKey:="CourseID", OtherKey:="CourseID")>  _
	Public Property CourseGrades() As EntitySet(Of CourseGrade)
		Get
			Return Me._CourseGrades
		End Get
		Set
			Me._CourseGrades.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_CourseInstructor", Storage:="_CourseInstructors", ThisKey:="CourseID", OtherKey:="CourseID")>  _
	Public Property CourseInstructors() As EntitySet(Of CourseInstructor)
		Get
			Return Me._CourseInstructors
		End Get
		Set
			Me._CourseInstructors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_OnlineCourse", Storage:="_OnlineCourse", ThisKey:="CourseID", OtherKey:="CourseID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OnlineCourse() As OnlineCourse
		Get
			Return Me._OnlineCourse.Entity
		End Get
		Set
			Dim previousValue As OnlineCourse = Me._OnlineCourse.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OnlineCourse.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OnlineCourse.Entity = Nothing
					previousValue.Course = Nothing
				End If
				Me._OnlineCourse.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Course = Me
				End If
				Me.SendPropertyChanged("OnlineCourse")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_OnsiteCourse", Storage:="_OnsiteCourse", ThisKey:="CourseID", OtherKey:="CourseID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OnsiteCourse() As OnsiteCourse
		Get
			Return Me._OnsiteCourse.Entity
		End Get
		Set
			Dim previousValue As OnsiteCourse = Me._OnsiteCourse.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OnsiteCourse.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OnsiteCourse.Entity = Nothing
					previousValue.Course = Nothing
				End If
				Me._OnsiteCourse.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Course = Me
				End If
				Me.SendPropertyChanged("OnsiteCourse")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Department_Course", Storage:="_Department", ThisKey:="DepartmentID", OtherKey:="DepartmentID", IsForeignKey:=true)>  _
	Public Property Department() As Department
		Get
			Return Me._Department.Entity
		End Get
		Set
			Dim previousValue As Department = Me._Department.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Department.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Department.Entity = Nothing
					previousValue.Courses.Remove(Me)
				End If
				Me._Department.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Courses.Add(Me)
					Me._DepartmentID = value.DepartmentID
				Else
					Me._DepartmentID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Department")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CourseGrades(ByVal entity As CourseGrade)
		Me.SendPropertyChanging
		entity.Course = Me
	End Sub
	
	Private Sub detach_CourseGrades(ByVal entity As CourseGrade)
		Me.SendPropertyChanging
		entity.Course = Nothing
	End Sub
	
	Private Sub attach_CourseInstructors(ByVal entity As CourseInstructor)
		Me.SendPropertyChanging
		entity.Course = Me
	End Sub
	
	Private Sub detach_CourseInstructors(ByVal entity As CourseInstructor)
		Me.SendPropertyChanging
		entity.Course = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Person")>  _
Partial Public Class Person
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PersonID As Integer
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _HireDate As System.Nullable(Of Date)
	
	Private _EnrollmentDate As System.Nullable(Of Date)
	
	Private _CourseGrades As EntitySet(Of CourseGrade)
	
	Private _CourseInstructors As EntitySet(Of CourseInstructor)
	
	Private _OfficeAssignment As EntityRef(Of OfficeAssignment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPersonIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonIDChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnHireDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHireDateChanged()
    End Sub
    Partial Private Sub OnEnrollmentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEnrollmentDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseGrades = New EntitySet(Of CourseGrade)(AddressOf Me.attach_CourseGrades, AddressOf Me.detach_CourseGrades)
		Me._CourseInstructors = New EntitySet(Of CourseInstructor)(AddressOf Me.attach_CourseInstructors, AddressOf Me.detach_CourseInstructors)
		Me._OfficeAssignment = CType(Nothing, EntityRef(Of OfficeAssignment))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PersonID() As Integer
		Get
			Return Me._PersonID
		End Get
		Set
			If ((Me._PersonID = value)  _
						= false) Then
				Me.OnPersonIDChanging(value)
				Me.SendPropertyChanging
				Me._PersonID = value
				Me.SendPropertyChanged("PersonID")
				Me.OnPersonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HireDate", DbType:="DateTime")>  _
	Public Property HireDate() As System.Nullable(Of Date)
		Get
			Return Me._HireDate
		End Get
		Set
			If (Me._HireDate.Equals(value) = false) Then
				Me.OnHireDateChanging(value)
				Me.SendPropertyChanging
				Me._HireDate = value
				Me.SendPropertyChanged("HireDate")
				Me.OnHireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnrollmentDate", DbType:="DateTime")>  _
	Public Property EnrollmentDate() As System.Nullable(Of Date)
		Get
			Return Me._EnrollmentDate
		End Get
		Set
			If (Me._EnrollmentDate.Equals(value) = false) Then
				Me.OnEnrollmentDateChanging(value)
				Me.SendPropertyChanging
				Me._EnrollmentDate = value
				Me.SendPropertyChanged("EnrollmentDate")
				Me.OnEnrollmentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Person_CourseGrade", Storage:="_CourseGrades", ThisKey:="PersonID", OtherKey:="StudentID")>  _
	Public Property CourseGrades() As EntitySet(Of CourseGrade)
		Get
			Return Me._CourseGrades
		End Get
		Set
			Me._CourseGrades.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Person_CourseInstructor", Storage:="_CourseInstructors", ThisKey:="PersonID", OtherKey:="PersonID")>  _
	Public Property CourseInstructors() As EntitySet(Of CourseInstructor)
		Get
			Return Me._CourseInstructors
		End Get
		Set
			Me._CourseInstructors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Person_OfficeAssignment", Storage:="_OfficeAssignment", ThisKey:="PersonID", OtherKey:="InstructorID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property OfficeAssignment() As OfficeAssignment
		Get
			Return Me._OfficeAssignment.Entity
		End Get
		Set
			Dim previousValue As OfficeAssignment = Me._OfficeAssignment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OfficeAssignment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OfficeAssignment.Entity = Nothing
					previousValue.Person = Nothing
				End If
				Me._OfficeAssignment.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Person = Me
				End If
				Me.SendPropertyChanged("OfficeAssignment")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CourseGrades(ByVal entity As CourseGrade)
		Me.SendPropertyChanging
		entity.Person = Me
	End Sub
	
	Private Sub detach_CourseGrades(ByVal entity As CourseGrade)
		Me.SendPropertyChanging
		entity.Person = Nothing
	End Sub
	
	Private Sub attach_CourseInstructors(ByVal entity As CourseInstructor)
		Me.SendPropertyChanging
		entity.Person = Me
	End Sub
	
	Private Sub detach_CourseInstructors(ByVal entity As CourseInstructor)
		Me.SendPropertyChanging
		entity.Person = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseGrade")>  _
Partial Public Class CourseGrade
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EnrollmentID As Integer
	
	Private _CourseID As Integer
	
	Private _StudentID As Integer
	
	Private _Grade As System.Nullable(Of Decimal)
	
	Private _Course As EntityRef(Of Course)
	
	Private _Person As EntityRef(Of Person)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEnrollmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEnrollmentIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnGradeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGradeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Course = CType(Nothing, EntityRef(Of Course))
		Me._Person = CType(Nothing, EntityRef(Of Person))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnrollmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EnrollmentID() As Integer
		Get
			Return Me._EnrollmentID
		End Get
		Set
			If ((Me._EnrollmentID = value)  _
						= false) Then
				Me.OnEnrollmentIDChanging(value)
				Me.SendPropertyChanging
				Me._EnrollmentID = value
				Me.SendPropertyChanged("EnrollmentID")
				Me.OnEnrollmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="Int NOT NULL")>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				If Me._Course.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="Int NOT NULL")>  _
	Public Property StudentID() As Integer
		Get
			Return Me._StudentID
		End Get
		Set
			If ((Me._StudentID = value)  _
						= false) Then
				If Me._Person.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade", DbType:="Decimal(3,2)")>  _
	Public Property Grade() As System.Nullable(Of Decimal)
		Get
			Return Me._Grade
		End Get
		Set
			If (Me._Grade.Equals(value) = false) Then
				Me.OnGradeChanging(value)
				Me.SendPropertyChanging
				Me._Grade = value
				Me.SendPropertyChanged("Grade")
				Me.OnGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_CourseGrade", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=true)>  _
	Public Property Course() As Course
		Get
			Return Me._Course.Entity
		End Get
		Set
			Dim previousValue As Course = Me._Course.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Course.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Course.Entity = Nothing
					previousValue.CourseGrades.Remove(Me)
				End If
				Me._Course.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseGrades.Add(Me)
					Me._CourseID = value.CourseID
				Else
					Me._CourseID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Course")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Person_CourseGrade", Storage:="_Person", ThisKey:="StudentID", OtherKey:="PersonID", IsForeignKey:=true)>  _
	Public Property Person() As Person
		Get
			Return Me._Person.Entity
		End Get
		Set
			Dim previousValue As Person = Me._Person.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Person.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Person.Entity = Nothing
					previousValue.CourseGrades.Remove(Me)
				End If
				Me._Person.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseGrades.Add(Me)
					Me._StudentID = value.PersonID
				Else
					Me._StudentID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Person")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseInstructor")>  _
Partial Public Class CourseInstructor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseID As Integer
	
	Private _PersonID As Integer
	
	Private _Course As EntityRef(Of Course)
	
	Private _Person As EntityRef(Of Person)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnPersonIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPersonIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Course = CType(Nothing, EntityRef(Of Course))
		Me._Person = CType(Nothing, EntityRef(Of Person))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				If Me._Course.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PersonID() As Integer
		Get
			Return Me._PersonID
		End Get
		Set
			If ((Me._PersonID = value)  _
						= false) Then
				If Me._Person.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPersonIDChanging(value)
				Me.SendPropertyChanging
				Me._PersonID = value
				Me.SendPropertyChanged("PersonID")
				Me.OnPersonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_CourseInstructor", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=true)>  _
	Public Property Course() As Course
		Get
			Return Me._Course.Entity
		End Get
		Set
			Dim previousValue As Course = Me._Course.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Course.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Course.Entity = Nothing
					previousValue.CourseInstructors.Remove(Me)
				End If
				Me._Course.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseInstructors.Add(Me)
					Me._CourseID = value.CourseID
				Else
					Me._CourseID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Course")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Person_CourseInstructor", Storage:="_Person", ThisKey:="PersonID", OtherKey:="PersonID", IsForeignKey:=true)>  _
	Public Property Person() As Person
		Get
			Return Me._Person.Entity
		End Get
		Set
			Dim previousValue As Person = Me._Person.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Person.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Person.Entity = Nothing
					previousValue.CourseInstructors.Remove(Me)
				End If
				Me._Person.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseInstructors.Add(Me)
					Me._PersonID = value.PersonID
				Else
					Me._PersonID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Person")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Department")>  _
Partial Public Class Department
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DepartmentID As Integer
	
	Private _Name As String
	
	Private _Budget As Decimal
	
	Private _StartDate As Date
	
	Private _Administrator As System.Nullable(Of Integer)
	
	Private _Courses As EntitySet(Of Course)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDepartmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDepartmentIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnBudgetChanging(value As Decimal)
    End Sub
    Partial Private Sub OnBudgetChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnAdministratorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAdministratorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Courses = New EntitySet(Of Course)(AddressOf Me.attach_Courses, AddressOf Me.detach_Courses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DepartmentID() As Integer
		Get
			Return Me._DepartmentID
		End Get
		Set
			If ((Me._DepartmentID = value)  _
						= false) Then
				Me.OnDepartmentIDChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentID = value
				Me.SendPropertyChanged("DepartmentID")
				Me.OnDepartmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Budget", DbType:="Money NOT NULL")>  _
	Public Property Budget() As Decimal
		Get
			Return Me._Budget
		End Get
		Set
			If ((Me._Budget = value)  _
						= false) Then
				Me.OnBudgetChanging(value)
				Me.SendPropertyChanging
				Me._Budget = value
				Me.SendPropertyChanged("Budget")
				Me.OnBudgetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartDate() As Date
		Get
			Return Me._StartDate
		End Get
		Set
			If ((Me._StartDate = value)  _
						= false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Administrator", DbType:="Int")>  _
	Public Property Administrator() As System.Nullable(Of Integer)
		Get
			Return Me._Administrator
		End Get
		Set
			If (Me._Administrator.Equals(value) = false) Then
				Me.OnAdministratorChanging(value)
				Me.SendPropertyChanging
				Me._Administrator = value
				Me.SendPropertyChanged("Administrator")
				Me.OnAdministratorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Department_Course", Storage:="_Courses", ThisKey:="DepartmentID", OtherKey:="DepartmentID")>  _
	Public Property Courses() As EntitySet(Of Course)
		Get
			Return Me._Courses
		End Get
		Set
			Me._Courses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Courses(ByVal entity As Course)
		Me.SendPropertyChanging
		entity.Department = Me
	End Sub
	
	Private Sub detach_Courses(ByVal entity As Course)
		Me.SendPropertyChanging
		entity.Department = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OfficeAssignment")>  _
Partial Public Class OfficeAssignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _InstructorID As Integer
	
	Private _Location As String
	
	Private _Timestamp As System.Data.Linq.Binary
	
	Private _Person As EntityRef(Of Person)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnInstructorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnInstructorIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnTimestampChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnTimestampChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Person = CType(Nothing, EntityRef(Of Person))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstructorID", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property InstructorID() As Integer
		Get
			Return Me._InstructorID
		End Get
		Set
			If ((Me._InstructorID = value)  _
						= false) Then
				If Me._Person.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInstructorIDChanging(value)
				Me.SendPropertyChanging
				Me._InstructorID = value
				Me.SendPropertyChanged("InstructorID")
				Me.OnInstructorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timestamp", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Timestamp() As System.Data.Linq.Binary
		Get
			Return Me._Timestamp
		End Get
		Set
			If (Object.Equals(Me._Timestamp, value) = false) Then
				Me.OnTimestampChanging(value)
				Me.SendPropertyChanging
				Me._Timestamp = value
				Me.SendPropertyChanged("Timestamp")
				Me.OnTimestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Person_OfficeAssignment", Storage:="_Person", ThisKey:="InstructorID", OtherKey:="PersonID", IsForeignKey:=true)>  _
	Public Property Person() As Person
		Get
			Return Me._Person.Entity
		End Get
		Set
			Dim previousValue As Person = Me._Person.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Person.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Person.Entity = Nothing
					previousValue.OfficeAssignment = Nothing
				End If
				Me._Person.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OfficeAssignment = Me
					Me._InstructorID = value.PersonID
				Else
					Me._InstructorID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Person")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OnlineCourse")>  _
Partial Public Class OnlineCourse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseID As Integer
	
	Private _URL As String
	
	Private _Course As EntityRef(Of Course)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Course = CType(Nothing, EntityRef(Of Course))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				If Me._Course.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property URL() As String
		Get
			Return Me._URL
		End Get
		Set
			If (String.Equals(Me._URL, value) = false) Then
				Me.OnURLChanging(value)
				Me.SendPropertyChanging
				Me._URL = value
				Me.SendPropertyChanged("URL")
				Me.OnURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_OnlineCourse", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=true)>  _
	Public Property Course() As Course
		Get
			Return Me._Course.Entity
		End Get
		Set
			Dim previousValue As Course = Me._Course.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Course.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Course.Entity = Nothing
					previousValue.OnlineCourse = Nothing
				End If
				Me._Course.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OnlineCourse = Me
					Me._CourseID = value.CourseID
				Else
					Me._CourseID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Course")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OnsiteCourse")>  _
Partial Public Class OnsiteCourse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseID As Integer
	
	Private _Location As String
	
	Private _Days As String
	
	Private _Time As Date
	
	Private _Course As EntityRef(Of Course)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDaysChanging(value As String)
    End Sub
    Partial Private Sub OnDaysChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Course = CType(Nothing, EntityRef(Of Course))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				If Me._Course.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Days", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Days() As String
		Get
			Return Me._Days
		End Get
		Set
			If (String.Equals(Me._Days, value) = false) Then
				Me.OnDaysChanging(value)
				Me.SendPropertyChanging
				Me._Days = value
				Me.SendPropertyChanged("Days")
				Me.OnDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Time() As Date
		Get
			Return Me._Time
		End Get
		Set
			If ((Me._Time = value)  _
						= false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_OnsiteCourse", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=true)>  _
	Public Property Course() As Course
		Get
			Return Me._Course.Entity
		End Get
		Set
			Dim previousValue As Course = Me._Course.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Course.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Course.Entity = Nothing
					previousValue.OnsiteCourse = Nothing
				End If
				Me._Course.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OnsiteCourse = Me
					Me._CourseID = value.CourseID
				Else
					Me._CourseID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Course")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
