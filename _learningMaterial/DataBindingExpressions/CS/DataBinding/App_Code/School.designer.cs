#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="School")]
public partial class SchoolDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCourse(Course instance);
  partial void UpdateCourse(Course instance);
  partial void DeleteCourse(Course instance);
  partial void InsertPerson(Person instance);
  partial void UpdatePerson(Person instance);
  partial void DeletePerson(Person instance);
  partial void InsertCourseGrade(CourseGrade instance);
  partial void UpdateCourseGrade(CourseGrade instance);
  partial void DeleteCourseGrade(CourseGrade instance);
  partial void InsertCourseInstructor(CourseInstructor instance);
  partial void UpdateCourseInstructor(CourseInstructor instance);
  partial void DeleteCourseInstructor(CourseInstructor instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertOfficeAssignment(OfficeAssignment instance);
  partial void UpdateOfficeAssignment(OfficeAssignment instance);
  partial void DeleteOfficeAssignment(OfficeAssignment instance);
  partial void InsertOnlineCourse(OnlineCourse instance);
  partial void UpdateOnlineCourse(OnlineCourse instance);
  partial void DeleteOnlineCourse(OnlineCourse instance);
  partial void InsertOnsiteCourse(OnsiteCourse instance);
  partial void UpdateOnsiteCourse(OnsiteCourse instance);
  partial void DeleteOnsiteCourse(OnsiteCourse instance);
  #endregion
	
	public SchoolDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SchoolConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public SchoolDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SchoolDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SchoolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SchoolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Course> Courses
	{
		get
		{
			return this.GetTable<Course>();
		}
	}
	
	public System.Data.Linq.Table<Person> Persons
	{
		get
		{
			return this.GetTable<Person>();
		}
	}
	
	public System.Data.Linq.Table<CourseGrade> CourseGrades
	{
		get
		{
			return this.GetTable<CourseGrade>();
		}
	}
	
	public System.Data.Linq.Table<CourseInstructor> CourseInstructors
	{
		get
		{
			return this.GetTable<CourseInstructor>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<OfficeAssignment> OfficeAssignments
	{
		get
		{
			return this.GetTable<OfficeAssignment>();
		}
	}
	
	public System.Data.Linq.Table<OnlineCourse> OnlineCourses
	{
		get
		{
			return this.GetTable<OnlineCourse>();
		}
	}
	
	public System.Data.Linq.Table<OnsiteCourse> OnsiteCourses
	{
		get
		{
			return this.GetTable<OnsiteCourse>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourseID;
	
	private string _Title;
	
	private int _Credits;
	
	private int _DepartmentID;
	
	private EntitySet<CourseGrade> _CourseGrades;
	
	private EntitySet<CourseInstructor> _CourseInstructors;
	
	private EntityRef<OnlineCourse> _OnlineCourse;
	
	private EntityRef<OnsiteCourse> _OnsiteCourse;
	
	private EntityRef<Department> _Department;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreditsChanging(int value);
    partial void OnCreditsChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
	
	public Course()
	{
		this._CourseGrades = new EntitySet<CourseGrade>(new Action<CourseGrade>(this.attach_CourseGrades), new Action<CourseGrade>(this.detach_CourseGrades));
		this._CourseInstructors = new EntitySet<CourseInstructor>(new Action<CourseInstructor>(this.attach_CourseInstructors), new Action<CourseInstructor>(this.detach_CourseInstructors));
		this._OnlineCourse = default(EntityRef<OnlineCourse>);
		this._OnsiteCourse = default(EntityRef<OnsiteCourse>);
		this._Department = default(EntityRef<Department>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credits", DbType="Int NOT NULL")]
	public int Credits
	{
		get
		{
			return this._Credits;
		}
		set
		{
			if ((this._Credits != value))
			{
				this.OnCreditsChanging(value);
				this.SendPropertyChanging();
				this._Credits = value;
				this.SendPropertyChanged("Credits");
				this.OnCreditsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
	public int DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseGrade", Storage="_CourseGrades", ThisKey="CourseID", OtherKey="CourseID")]
	public EntitySet<CourseGrade> CourseGrades
	{
		get
		{
			return this._CourseGrades;
		}
		set
		{
			this._CourseGrades.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInstructor", Storage="_CourseInstructors", ThisKey="CourseID", OtherKey="CourseID")]
	public EntitySet<CourseInstructor> CourseInstructors
	{
		get
		{
			return this._CourseInstructors;
		}
		set
		{
			this._CourseInstructors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_OnlineCourse", Storage="_OnlineCourse", ThisKey="CourseID", OtherKey="CourseID", IsUnique=true, IsForeignKey=false)]
	public OnlineCourse OnlineCourse
	{
		get
		{
			return this._OnlineCourse.Entity;
		}
		set
		{
			OnlineCourse previousValue = this._OnlineCourse.Entity;
			if (((previousValue != value) 
						|| (this._OnlineCourse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OnlineCourse.Entity = null;
					previousValue.Course = null;
				}
				this._OnlineCourse.Entity = value;
				if ((value != null))
				{
					value.Course = this;
				}
				this.SendPropertyChanged("OnlineCourse");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_OnsiteCourse", Storage="_OnsiteCourse", ThisKey="CourseID", OtherKey="CourseID", IsUnique=true, IsForeignKey=false)]
	public OnsiteCourse OnsiteCourse
	{
		get
		{
			return this._OnsiteCourse.Entity;
		}
		set
		{
			OnsiteCourse previousValue = this._OnsiteCourse.Entity;
			if (((previousValue != value) 
						|| (this._OnsiteCourse.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OnsiteCourse.Entity = null;
					previousValue.Course = null;
				}
				this._OnsiteCourse.Entity = value;
				if ((value != null))
				{
					value.Course = this;
				}
				this.SendPropertyChanged("OnsiteCourse");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Course", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.Courses.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.Courses.Add(this);
					this._DepartmentID = value.DepartmentID;
				}
				else
				{
					this._DepartmentID = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CourseGrades(CourseGrade entity)
	{
		this.SendPropertyChanging();
		entity.Course = this;
	}
	
	private void detach_CourseGrades(CourseGrade entity)
	{
		this.SendPropertyChanging();
		entity.Course = null;
	}
	
	private void attach_CourseInstructors(CourseInstructor entity)
	{
		this.SendPropertyChanging();
		entity.Course = this;
	}
	
	private void detach_CourseInstructors(CourseInstructor entity)
	{
		this.SendPropertyChanging();
		entity.Course = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PersonID;
	
	private string _LastName;
	
	private string _FirstName;
	
	private System.Nullable<System.DateTime> _HireDate;
	
	private System.Nullable<System.DateTime> _EnrollmentDate;
	
	private EntitySet<CourseGrade> _CourseGrades;
	
	private EntitySet<CourseInstructor> _CourseInstructors;
	
	private EntityRef<OfficeAssignment> _OfficeAssignment;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHireDateChanged();
    partial void OnEnrollmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnrollmentDateChanged();
    #endregion
	
	public Person()
	{
		this._CourseGrades = new EntitySet<CourseGrade>(new Action<CourseGrade>(this.attach_CourseGrades), new Action<CourseGrade>(this.detach_CourseGrades));
		this._CourseInstructors = new EntitySet<CourseInstructor>(new Action<CourseInstructor>(this.attach_CourseInstructors), new Action<CourseInstructor>(this.detach_CourseInstructors));
		this._OfficeAssignment = default(EntityRef<OfficeAssignment>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PersonID
	{
		get
		{
			return this._PersonID;
		}
		set
		{
			if ((this._PersonID != value))
			{
				this.OnPersonIDChanging(value);
				this.SendPropertyChanging();
				this._PersonID = value;
				this.SendPropertyChanged("PersonID");
				this.OnPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> HireDate
	{
		get
		{
			return this._HireDate;
		}
		set
		{
			if ((this._HireDate != value))
			{
				this.OnHireDateChanging(value);
				this.SendPropertyChanging();
				this._HireDate = value;
				this.SendPropertyChanged("HireDate");
				this.OnHireDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollmentDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> EnrollmentDate
	{
		get
		{
			return this._EnrollmentDate;
		}
		set
		{
			if ((this._EnrollmentDate != value))
			{
				this.OnEnrollmentDateChanging(value);
				this.SendPropertyChanging();
				this._EnrollmentDate = value;
				this.SendPropertyChanged("EnrollmentDate");
				this.OnEnrollmentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_CourseGrade", Storage="_CourseGrades", ThisKey="PersonID", OtherKey="StudentID")]
	public EntitySet<CourseGrade> CourseGrades
	{
		get
		{
			return this._CourseGrades;
		}
		set
		{
			this._CourseGrades.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_CourseInstructor", Storage="_CourseInstructors", ThisKey="PersonID", OtherKey="PersonID")]
	public EntitySet<CourseInstructor> CourseInstructors
	{
		get
		{
			return this._CourseInstructors;
		}
		set
		{
			this._CourseInstructors.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_OfficeAssignment", Storage="_OfficeAssignment", ThisKey="PersonID", OtherKey="InstructorID", IsUnique=true, IsForeignKey=false)]
	public OfficeAssignment OfficeAssignment
	{
		get
		{
			return this._OfficeAssignment.Entity;
		}
		set
		{
			OfficeAssignment previousValue = this._OfficeAssignment.Entity;
			if (((previousValue != value) 
						|| (this._OfficeAssignment.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OfficeAssignment.Entity = null;
					previousValue.Person = null;
				}
				this._OfficeAssignment.Entity = value;
				if ((value != null))
				{
					value.Person = this;
				}
				this.SendPropertyChanged("OfficeAssignment");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CourseGrades(CourseGrade entity)
	{
		this.SendPropertyChanging();
		entity.Person = this;
	}
	
	private void detach_CourseGrades(CourseGrade entity)
	{
		this.SendPropertyChanging();
		entity.Person = null;
	}
	
	private void attach_CourseInstructors(CourseInstructor entity)
	{
		this.SendPropertyChanging();
		entity.Person = this;
	}
	
	private void detach_CourseInstructors(CourseInstructor entity)
	{
		this.SendPropertyChanging();
		entity.Person = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseGrade")]
public partial class CourseGrade : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EnrollmentID;
	
	private int _CourseID;
	
	private int _StudentID;
	
	private System.Nullable<decimal> _Grade;
	
	private EntityRef<Course> _Course;
	
	private EntityRef<Person> _Person;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrollmentIDChanging(int value);
    partial void OnEnrollmentIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnGradeChanging(System.Nullable<decimal> value);
    partial void OnGradeChanged();
    #endregion
	
	public CourseGrade()
	{
		this._Course = default(EntityRef<Course>);
		this._Person = default(EntityRef<Person>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EnrollmentID
	{
		get
		{
			return this._EnrollmentID;
		}
		set
		{
			if ((this._EnrollmentID != value))
			{
				this.OnEnrollmentIDChanging(value);
				this.SendPropertyChanging();
				this._EnrollmentID = value;
				this.SendPropertyChanged("EnrollmentID");
				this.OnEnrollmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
	public int StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Decimal(3,2)")]
	public System.Nullable<decimal> Grade
	{
		get
		{
			return this._Grade;
		}
		set
		{
			if ((this._Grade != value))
			{
				this.OnGradeChanging(value);
				this.SendPropertyChanging();
				this._Grade = value;
				this.SendPropertyChanged("Grade");
				this.OnGradeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseGrade", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.CourseGrades.Remove(this);
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.CourseGrades.Add(this);
					this._CourseID = value.CourseID;
				}
				else
				{
					this._CourseID = default(int);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_CourseGrade", Storage="_Person", ThisKey="StudentID", OtherKey="PersonID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.CourseGrades.Remove(this);
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.CourseGrades.Add(this);
					this._StudentID = value.PersonID;
				}
				else
				{
					this._StudentID = default(int);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseInstructor")]
public partial class CourseInstructor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourseID;
	
	private int _PersonID;
	
	private EntityRef<Course> _Course;
	
	private EntityRef<Person> _Person;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
	
	public CourseInstructor()
	{
		this._Course = default(EntityRef<Course>);
		this._Person = default(EntityRef<Person>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int PersonID
	{
		get
		{
			return this._PersonID;
		}
		set
		{
			if ((this._PersonID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPersonIDChanging(value);
				this.SendPropertyChanging();
				this._PersonID = value;
				this.SendPropertyChanged("PersonID");
				this.OnPersonIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseInstructor", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.CourseInstructors.Remove(this);
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.CourseInstructors.Add(this);
					this._CourseID = value.CourseID;
				}
				else
				{
					this._CourseID = default(int);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_CourseInstructor", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.CourseInstructors.Remove(this);
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.CourseInstructors.Add(this);
					this._PersonID = value.PersonID;
				}
				else
				{
					this._PersonID = default(int);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentID;
	
	private string _Name;
	
	private decimal _Budget;
	
	private System.DateTime _StartDate;
	
	private System.Nullable<int> _Administrator;
	
	private EntitySet<Course> _Courses;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBudgetChanging(decimal value);
    partial void OnBudgetChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnAdministratorChanging(System.Nullable<int> value);
    partial void OnAdministratorChanged();
    #endregion
	
	public Department()
	{
		this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Budget", DbType="Money NOT NULL")]
	public decimal Budget
	{
		get
		{
			return this._Budget;
		}
		set
		{
			if ((this._Budget != value))
			{
				this.OnBudgetChanging(value);
				this.SendPropertyChanging();
				this._Budget = value;
				this.SendPropertyChanged("Budget");
				this.OnBudgetChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Administrator", DbType="Int")]
	public System.Nullable<int> Administrator
	{
		get
		{
			return this._Administrator;
		}
		set
		{
			if ((this._Administrator != value))
			{
				this.OnAdministratorChanging(value);
				this.SendPropertyChanging();
				this._Administrator = value;
				this.SendPropertyChanged("Administrator");
				this.OnAdministratorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Course", Storage="_Courses", ThisKey="DepartmentID", OtherKey="DepartmentID")]
	public EntitySet<Course> Courses
	{
		get
		{
			return this._Courses;
		}
		set
		{
			this._Courses.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Courses(Course entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_Courses(Course entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OfficeAssignment")]
public partial class OfficeAssignment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _InstructorID;
	
	private string _Location;
	
	private System.Data.Linq.Binary _Timestamp;
	
	private EntityRef<Person> _Person;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstructorIDChanging(int value);
    partial void OnInstructorIDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
	
	public OfficeAssignment()
	{
		this._Person = default(EntityRef<Person>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
	public int InstructorID
	{
		get
		{
			return this._InstructorID;
		}
		set
		{
			if ((this._InstructorID != value))
			{
				if (this._Person.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnInstructorIDChanging(value);
				this.SendPropertyChanging();
				this._InstructorID = value;
				this.SendPropertyChanged("InstructorID");
				this.OnInstructorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Timestamp
	{
		get
		{
			return this._Timestamp;
		}
		set
		{
			if ((this._Timestamp != value))
			{
				this.OnTimestampChanging(value);
				this.SendPropertyChanging();
				this._Timestamp = value;
				this.SendPropertyChanged("Timestamp");
				this.OnTimestampChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_OfficeAssignment", Storage="_Person", ThisKey="InstructorID", OtherKey="PersonID", IsForeignKey=true)]
	public Person Person
	{
		get
		{
			return this._Person.Entity;
		}
		set
		{
			Person previousValue = this._Person.Entity;
			if (((previousValue != value) 
						|| (this._Person.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Person.Entity = null;
					previousValue.OfficeAssignment = null;
				}
				this._Person.Entity = value;
				if ((value != null))
				{
					value.OfficeAssignment = this;
					this._InstructorID = value.PersonID;
				}
				else
				{
					this._InstructorID = default(int);
				}
				this.SendPropertyChanged("Person");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OnlineCourse")]
public partial class OnlineCourse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourseID;
	
	private string _URL;
	
	private EntityRef<Course> _Course;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
	
	public OnlineCourse()
	{
		this._Course = default(EntityRef<Course>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string URL
	{
		get
		{
			return this._URL;
		}
		set
		{
			if ((this._URL != value))
			{
				this.OnURLChanging(value);
				this.SendPropertyChanging();
				this._URL = value;
				this.SendPropertyChanged("URL");
				this.OnURLChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_OnlineCourse", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.OnlineCourse = null;
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.OnlineCourse = this;
					this._CourseID = value.CourseID;
				}
				else
				{
					this._CourseID = default(int);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OnsiteCourse")]
public partial class OnsiteCourse : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CourseID;
	
	private string _Location;
	
	private string _Days;
	
	private System.DateTime _Time;
	
	private EntityRef<Course> _Course;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDaysChanging(string value);
    partial void OnDaysChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
	
	public OnsiteCourse()
	{
		this._Course = default(EntityRef<Course>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CourseID
	{
		get
		{
			return this._CourseID;
		}
		set
		{
			if ((this._CourseID != value))
			{
				if (this._Course.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCourseIDChanging(value);
				this.SendPropertyChanging();
				this._CourseID = value;
				this.SendPropertyChanged("CourseID");
				this.OnCourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Days", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Days
	{
		get
		{
			return this._Days;
		}
		set
		{
			if ((this._Days != value))
			{
				this.OnDaysChanging(value);
				this.SendPropertyChanging();
				this._Days = value;
				this.SendPropertyChanged("Days");
				this.OnDaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="SmallDateTime NOT NULL")]
	public System.DateTime Time
	{
		get
		{
			return this._Time;
		}
		set
		{
			if ((this._Time != value))
			{
				this.OnTimeChanging(value);
				this.SendPropertyChanging();
				this._Time = value;
				this.SendPropertyChanged("Time");
				this.OnTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_OnsiteCourse", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
	public Course Course
	{
		get
		{
			return this._Course.Entity;
		}
		set
		{
			Course previousValue = this._Course.Entity;
			if (((previousValue != value) 
						|| (this._Course.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Course.Entity = null;
					previousValue.OnsiteCourse = null;
				}
				this._Course.Entity = value;
				if ((value != null))
				{
					value.OnsiteCourse = this;
					this._CourseID = value.CourseID;
				}
				else
				{
					this._CourseID = default(int);
				}
				this.SendPropertyChanged("Course");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
